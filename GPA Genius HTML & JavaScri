<!--  
Project By: Bhargav Harihar, Arnav Narra, Siddharth Mooli 
Date: 10/10/2023 
Project Details: This project is a GPA Calculator that allows students to see their GPA the moment they enter their information, rather than having to wait for the semester to end. 
-->

<!DOCTYPE html>
<html lang="en">

<!-- This is the beginning of the HTML document and the head section. #SM# 1 -->
<head>
  <!-- Define the character encoding for the document as UTF-8. -->  
  <meta charset="UTF-8">
  
  <!-- Link to an external stylesheet called 'style.css' for styling the page. -->
  <link href="style.css" rel="stylesheet"/>
  
  <!-- Configure the viewport for better responsiveness on different devices. -->
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  
  <!-- Set the title of the web page, which will be displayed in the browser's tab. -->
  <title>Course GPA Calculator</title>
  
</head>

<body>
    <!-- This is the main content of the webpage. -->
    
    <h1>Course GPA Calculator</h1>
    <!-- This is the main heading of the page, indicating its purpose. -->

    <form id="courseForm">
      <!-- This is a form element with an ID 'courseForm' that contains input fields for course information. -->

        <!-- Input and Labels #BH# 1 -->
      
        <label for="courseName">Course Name:</label>
        <input type="text" id="courseName" required><br><br>

        <label for="courseGrade">Course Grade:</label>
        <input type="number" id="courseGrade" required><br><br>

        <label for="courseWeightage">Course AP Weightage:</label>
        
      <!-- Dropdown selection for choosing course weightage. -->
      <select id="courseWeightage" required>
            <option value="5.0">5.0</option>
            <option value="5.5">5.5</option>
            <option value="6.0">6.0</option>
        </select>
        
        
        <button type="button" id="addCourse">Add Course</button>
      <!-- Button element for adding a course to the list. -->

    </form>

  <!-- Heading indicating the list of courses. #AN# -->
    <h2>Course List:</h2>
    <table id="courseTable">
        <thead>
            <tr>
                <th>Course Name</th>
                <th>Grade</th>
                <th>Weightage</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
        </tbody>
    </table>

  <!-- Button element for finishing and calculating the GPA. -->
    <button type="button" id="finishButton">Finish</button>

    <p id="averageGPA"> </p>

    <!-- JavaScript Section  --> 
    <script>
        // Arrays to store course information and weighted GPAs.
        const courseNames = [];
        const courseGrades = [];
        const courseWeightages = [];
        const weightedGPAs = [];

        // Function to add a course to the list. #SM# 
        function addCourse() {
            
          // Retrieve course details from input fields.
            const courseName = document.getElementById("courseName").value;
            const courseGrade = parseFloat(document.getElementById("courseGrade").value);
            const courseWeightage = parseFloat(document.getElementById("courseWeightage").value);
        
          // Check if the input values are numeric, show an alert if not.
            if (isNaN(courseGrade) || isNaN(courseWeightage)) {
                alert("Please enter valid numeric values for Grade and Weightage.");
                return;
            }

            // Add course details to respective arrays.
            courseNames.push(courseName);
            courseGrades.push(courseGrade);
            courseWeightages.push(courseWeightage);

            // Update the table with the new course details.
            const courseTable = document.getElementById("courseTable");
            const newRow = courseTable.insertRow(-1);

            // Create table cells for the course details and an edit button and set the text for the edit button and add an event listener.

            const nameCell = newRow.insertCell(0);
            nameCell.textContent = courseName;

            const gradeCell = newRow.insertCell(1);
            gradeCell.textContent = courseGrade;

            const weightageCell = newRow.insertCell(2);
            weightageCell.textContent = courseWeightage;

            const editCell = newRow.insertCell(3);
            const editButton = document.createElement("button");
            editButton.textContent = "Edit";
            editButton.addEventListener("click", function() {
                editCourse(newRow.rowIndex);
            });
            
          // Append the edit button to the table cell and reset input fields.
          editCell.appendChild(editButton);

            document.getElementById("courseName").value = "";
            document.getElementById("courseGrade").value = "";
            document.getElementById("courseWeightage").value = "";
        }


        // #BH# 
         function editCourse(rowIndex) { 
          
            // Prompt the user for updated course details. 
           const nameInput = prompt("Enter the updated course name:");
            const gradeInput = parseFloat(prompt("Enter the updated course grade:"));
            const weightageInput = parseFloat(prompt("Enter the updated course weightage:"));
    
            // Check if the input values are numeric, show an alert if not.
            if (isNaN(gradeInput) || isNaN(weightageInput)) {
                alert("Please enter valid numeric values for Grade and Weightage.");
              
                return;
            }  
    
           // Update the course details in the respective arrays.
            courseNames[rowIndex - 1] = nameInput;
            courseGrades[rowIndex - 1] = gradeInput;
            courseWeightages[rowIndex - 1] = weightageInput;

            // Update the corresponding row in the table with the new values.
            const table = document.getElementById("courseTable");
            const row = table.rows[rowIndex];
            row.cells[0].textContent = nameInput;
            row.cells[1].textContent = gradeInput;
            row.cells[2].textContent = weightageInput;
        }

        //  #AN# 
        function deleteCourse(rowIndex) {
            
            // Remove the course details from the respective arrays at the given index.
            courseNames.splice(rowIndex - 1, 1);
            courseGrades.splice(rowIndex - 1, 1);
            courseWeightages.splice(rowIndex - 1, 1);
    
          // Get a reference to the course table and delete the row at the specified index.
            const table = document.getElementById("courseTable");
            table.deleteRow(rowIndex);
        }

        // #SM# 
        function calculateWeightedGPAs() {
            
          // Clear the 'weightedGPAs' array to ensure it starts with no previous data.
            weightedGPAs.length = 0;

          // Iterate through each course's grade and weightage to calculate weighted GPAs.  
          for (let i = 0; i < courseGrades.length; i++) {
            
            // Calculate the weighted GPA for the current course.    
            const weightedGPA = (courseGrades[i] / 100) * courseWeightages[i];
            
            // Add the calculated weighted GPA to the 'weightedGPAs' array.
            weightedGPAs.push(weightedGPA);
            }
        }

        // #BH# 
        function calculateAverageGPA() {
          
          // Calculate the total of all the weighted GPAs using the 'reduce' method.   
          const totalWeightedGPA = weightedGPAs.reduce((acc, val) => acc + val, 0);
          
          // Calculate the average weighted GPA by dividing the total by the number of courses.  
          const averageWeightedGPA = totalWeightedGPA / weightedGPAs.length;
    
          // Get the HTML element where the average GPA will be displayed.
            const averageGPAText = document.getElementById("averageGPA");
            
          // Update the content of the HTML element with the calculated average weighted GPA.
          averageGPAText.textContent = `Average Weighted GPA: ${averageWeightedGPA.toFixed(2)}`;
        }

        // Everything below this: #AN#
        
      // Add an event listener to the "Add Course" button to trigger the 'addCourse' function when clicked.
      document.getElementById("addCourse").addEventListener("click", addCourse);

        // Add an event listener to the "Finish" button with an anonymous function.
        document.getElementById("finishButton").addEventListener("click", function() {

          // Check if there are no courses added before attempting to finish.
          if (courseGrades.length === 0 || courseWeightages.length === 0) {
                alert("Please add at least one course before finishing.");
                return; // Exit the function to prevent further processing.
            }
          
            // Calculate weighted GPAs and average GPA when the "Finish" button is clicked.
            calculateWeightedGPAs();
            calculateAverageGPA();
        });

    // End of the JavaScript section 
    </script>

</body>

</html>
